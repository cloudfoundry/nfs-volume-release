#!/bin/bash

<% if p("nfsv3driver.disable") %>
<% else %>
set -eo pipefail

uninstall_if_present ()
{
    echo "Uninstalling $1"

    set +eo pipefail
    dpkg -s $1 2>&1
    dpkg_installed=$(echo $?)
    if [ "$dpkg_installed" == "0" ]; then
        for x in `seq 1 100` :
        do
          dpkg --force-depends --force-confdef -P $1 2>&1
          if [ $? -ne 0 ] ; then
            sleep 3
          else
           set -eo pipefail
           return 0
          fi
        done
        set -eo pipefail
        lsof -n
        exit 1
    else
        echo "$1 is not installed, no need to uninstall"
    fi
    set -eo pipefail
}

install_if_missing ()
{
    echo "Installing $1"

    set +eo pipefail
    dpkg -s $1 2>&1
    dpkg_installed=$(echo $?)
    if [ "$dpkg_installed" != "0" ]; then
        for x in `seq 1 100` :
        do
          dpkg --force-confdef -i $2 2>&1
          if [ $? -ne 0 ] ; then
            sleep 3
          else
           set -eo pipefail
           return 0
          fi
        done
        set -eo pipefail
        lsof -n
        exit 1
    else
        echo "Skipping $1"
    fi
    set -eo pipefail
}

install_or_upgrade ()
{
    echo "Upgrading $1"

    set +eo pipefail

    for x in `seq 1 100` :
    do
      dpkg --force-confdef -i $2 2>&1
      if [ $? -ne 0 ] ; then
        sleep 3
      else
       set -eo pipefail
       return 0
      fi
    done
    set -eo pipefail
    lsof -n
    exit 1
    set -eo pipefail
}

configure_if_present ()
{
    echo "Configuring $1"

    set +eo pipefail
    dpkg -s $1 2>&1
    dpkg_installed=$(echo $?)
    if [ "$dpkg_installed" == "0" ]; then
        for x in `seq 1 100` :
        do
          dpkg --configure $1 2>&1 | grep 'is already installed and configured'
          if [ $? -ne 0 ] ; then
            sleep 3
          else
           set -eo pipefail
           return 0
          fi
        done
        set -eo pipefail
        lsof -n
        exit 1
    else
        echo "Skipping $1"
    fi
    set -eo pipefail
}


function copy_client_certs_to_spec_dir() {
  local cert_dir="<%= p('nfsv3driver.driver_path') %>/certs/nfsv3driver"

  mkdir -p ${cert_dir}
  cp -p /var/vcap/jobs/nfsv3driver/config/certs/ca.crt ${cert_dir}
  cp -p /var/vcap/jobs/nfsv3driver/config/certs/client.crt ${cert_dir}
  cp -p /var/vcap/jobs/nfsv3driver/config/certs/client.key ${cert_dir}
}

function prepend_rfc3339_datetime() {
  perl -ne 'BEGIN { use Time::HiRes "time"; use POSIX "strftime"; STDOUT->autoflush(1) }; my $t = time; my $fsec = sprintf ".%09d", ($t-int($t))*1000000000; my $time = strftime("[%Y-%m-%dT%H:%M:%S".$fsec."Z]", localtime $t); print("$time $_")'
}

function main() {
  echo "Copying client certs to data directory..."
  copy_client_certs_to_spec_dir

  exit 0
}

main | prepend_rfc3339_datetime
<% end %>
